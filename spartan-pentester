Spartan_Pentester.py


(Make sure you have the repos downloaded already) (This is a free tool anyone can download and utilize. It also does not cost)


import os
import subprocess
import argparse
from time import sleep

def spartan_banner(tool_name):
    banner = f"""
========================================================
                 SPARTAN Pentester (Free)                       
========================================================
                    Created by Hedley                    
========================================================
"""
    print(banner)

# Function to perform DNS lookup using Kali's whois tool
def dns_lookup(target):
    print("[*] Performing DNS Lookup...")
    try:
        result = subprocess.check_output(["whois", target], stderr=subprocess.STDOUT)
        print(result.decode('utf-8'))
    except subprocess.CalledProcessError as e:
        print(f"[-] Error performing WHOIS lookup: {e.output.decode('utf-8')}")

# Function to perform port scan using Nmap
def port_scan(target):
    print("[*] Performing Port Scan...")
    try:
        result = subprocess.check_output(["nmap", "-p", "1-1024", target], stderr=subprocess.STDOUT)
        print(result.decode('utf-8'))
    except subprocess.CalledProcessError as e:
        print(f"[-] Error performing port scan: {e.output.decode('utf-8')}")

# Function to perform vulnerability scan (basic HTTP and FTP checks)
def vulnerability_scan(target):
    print("[*] Performing Basic Vulnerability Scan...")
    try:
        # Check HTTP response
        result = subprocess.check_output(["curl", "-I", f"http://{target}"], stderr=subprocess.STDOUT)
        if "200 OK" in result.decode('utf-8'):
            print(f"[+] {target} is responding on HTTP.")
        else:
            print(f"[-] {target} HTTP status: {result.decode('utf-8')}")
    except subprocess.CalledProcessError as e:
        print(f"[-] Error checking HTTP service: {e.output.decode('utf-8')}")
    
    # Check FTP service (port 21)
    try:
        result = subprocess.check_output(["nmap", "-p", "21", target], stderr=subprocess.STDOUT)
        if "21/tcp" in result.decode('utf-8'):
            print(f"[+] FTP service detected on {target}: Port 21 is open.")
        else:
            print(f"[-] No FTP service detected on {target}.")
    except subprocess.CalledProcessError as e:
        print(f"[-] Error checking FTP service: {e.output.decode('utf-8')}")

# Function to check for weak SSH configurations (basic check for open SSH port)
def ssh_check(target):
    print("[*] Checking for weak SSH...")
    try:
        result = subprocess.check_output(["nmap", "-p", "22", target], stderr=subprocess.STDOUT)
        if "22/tcp" in result.decode('utf-8'):
            print(f"[+] SSH port open on {target}. Consider testing weak passwords (not implemented in this free version).")
        else:
            print(f"[-] No SSH service detected on {target}.")
    except subprocess.CalledProcessError as e:
        print(f"[-] Error checking SSH service: {e.output.decode('utf-8')}")

# Main function to run the full pentest
def main():
    spartan_banner("Pentester")
    parser = argparse.ArgumentParser(description="SPARTAN Pentester - Perform a basic pentest on a target.")
    parser.add_argument("target", help="The target domain or IP to perform the pentest on.")
    args = parser.parse_args()

    target = args.target

    # Perform all pentesting steps
    dns_lookup(target)
    sleep(2)
    port_scan(target)
    sleep(2)
    vulnerability_scan(target)
    sleep(2)
    ssh_check(target)

    print("\n[+] Pentest completed. Review the output for possible vulnerabilities and open services.")

if __name__ == "__main__":
    main()



Save the tool as spartan_pentester.py
Run the tool by using python3 spartan_pentester.py <target> - Remove <target> and write the URL or IP of the target

-- Hedley
